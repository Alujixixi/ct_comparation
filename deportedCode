void run_test() {
                                                
                    
    cout << "Start run_test" << endl;
    // std::chrono::steady_clock::time_point t_before_set_up = std::chrono::steady_clock::now();
    const int modulus = 41;

    CCParams<CryptoContextBFVRNS> parameters;
    parameters.SetPlaintextModulus(modulus);
    parameters.SetMultiplicativeDepth(floor(log2(modulus)));

    CryptoContext<DCRTPoly> cryptoContext = GenCryptoContext(parameters);

    // Enable features that you wish to use

    cout << "cryptoContext successfully gen" << endl;
    cryptoContext->Enable(PKE);
    cryptoContext->Enable(KEYSWITCH);
    cryptoContext->Enable(LEVELEDSHE);

    cout << "\np = " << cryptoContext->GetCryptoParameters()->GetPlaintextModulus() << std::endl;
    cout << "m = " << cryptoContext->GetCryptoParameters()->GetElementParams()->GetCyclotomicOrder() << std::endl;
    std::cout << "log2 q = " << log2(cryptoContext->GetCryptoParameters()->GetElementParams()->GetModulus().ConvertToDouble())
              << std::endl;

    KeyPair<DCRTPoly> keyPair;

    // Generate a public/private key pair
    keyPair = cryptoContext->KeyGen();

    cout << "KenGen Finished" << endl;
    
    // Generate the relinearization key
    cryptoContext->EvalMultKeyGen(keyPair.secretKey);

    // std::chrono::steady_clock::time_point t_before_encrypt = std::chrono::steady_clock::now();

    vector<int64_t> vectorOfInts1 = {1};
    Plaintext plaintextAllOne = cryptoContext->MakeCoefPackedPlaintext(vectorOfInts1);
    auto ciphertextAllOne = cryptoContext->Encrypt(keyPair.publicKey, plaintextAllOne);
    auto res = ciphertextAllOne;
    // test mul
    cout << "test negtive num" << endl;
    std::vector<int64_t> vectorOfIntssss = {-8};
    Plaintext plaintexttest               = cryptoContext->MakeCoefPackedPlaintext(vectorOfIntssss);
    auto ct = cryptoContext -> Encrypt(keyPair.publicKey, plaintexttest);
    for (int x = modulus - 1; x > 0; x >>= 1) {
        if(x&1) {
            res = cryptoContext -> EvalMult(ct, res);
        }
        ct = cryptoContext -> EvalMult(ct, ct);
    }

    Plaintext resp;
    cryptoContext->Decrypt(keyPair.secretKey, res, &resp);
    cout << "res: " << resp << endl;
}



void run_crt(const int crt_modulus_vector[], const vector<int64_t> rns_vector[], const int crt_modulus_number) {
    // Sample Program: Step 1 - Set CryptoContext
    using T_CP = Ciphertext<DCRTPoly>;
    vector<CCParams<CryptoContextBFVRNS>> parametersVector(crt_modulus_number);
    vector<CryptoContext<DCRTPoly>> cryptoContextVector(crt_modulus_number);
    vector<KeyPair<DCRTPoly>> keyPairVector(crt_modulus_number);
    vector<Plaintext> plaintextVector(crt_modulus_number);
    vector<T_CP> ciphertextVector(crt_modulus_number);
    vector<T_CP> resVector(crt_modulus_number);

    for (int i = 0; i < crt_modulus_number; i++) {
        const int modulus = crt_modulus_vector[i];
        parametersVector[i].SetMultiplicativeDepth(floor(log2(modulus)));
        // parametersVector[i].SetMultiplicativeDepth(2);
        parametersVector[i].SetPlaintextModulus(modulus);
        cryptoContextVector[i] = GenCryptoContext(parametersVector[i]);
        cryptoContextVector[i]->Enable(PKE);
        cryptoContextVector[i]->Enable(KEYSWITCH);
        cryptoContextVector[i]->Enable(LEVELEDSHE);
        keyPairVector[i] = cryptoContextVector[i] -> KeyGen();
        cryptoContextVector[i] -> EvalMultKeyGen(keyPairVector[i].secretKey);
        plaintextVector[i] = cryptoContextVector[i] -> MakePackedPlaintext(rns_vector[i]);
        ciphertextVector[i] = cryptoContextVector[i] -> Encrypt(keyPairVector[i].publicKey, plaintextVector[i]);
        
        vector<int64_t> vectorOfInts1 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
        Plaintext plaintextAllOne = cryptoContextVector[i]->MakePackedPlaintext(vectorOfInts1);
        auto ciphertextAllOne = cryptoContextVector[i] -> Encrypt(keyPairVector[i].publicKey, plaintextAllOne);

        auto res = ciphertextAllOne;
        for (int x = modulus; x > 0; x >>= 1) {
            if(x&1) {
                res = cryptoContextVector[i] -> EvalMult(ciphertextVector[i], res);
            }
            ciphertextVector[i] = cryptoContextVector[i] -> EvalMult(ciphertextVector[i], ciphertextVector[i]);
        }
        resVector[i] = res;
    }

    for(int i = 0; i < crt_modulus_number; i++) {
        Plaintext plaintextResult;
        cryptoContextVector[i] -> Decrypt(keyPairVector[i].secretKey, resVector[i], &plaintextResult);

        std::cout << "Plaintext #res: " << plaintextResult << std::endl;
    }
}






